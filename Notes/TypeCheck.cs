//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 TypeCheck.g 2014-11-13 16:55:51

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019




using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class TypeCheck : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "ARGS", "ASSIGN", "BLOCK", "BOOL", "COMMA", "COMMENT", "DECL", "DECLLIST", "DECLS", "DELETE", "DIVIDE", "DOT", "ELSE", "ENDL", "EQ", "FALSE", "FUN", "FUNCS", "GE", "GT", "ID", "IF", "INT", "INTEGER", "INVOKE", "LBRACE", "LE", "LPAREN", "LT", "MINUS", "NE", "NEG", "NEW", "NOT", "NULL", "OR", "PARAMS", "PLUS", "PRINT", "PROGRAM", "RBRACE", "READ", "RETTYPE", "RETURN", "RPAREN", "SEMI", "STMTS", "STRUCT", "TIMES", "TRUE", "TYPE", "TYPES", "VOID", "WHILE", "WS"
	};
	public const int EOF=-1;
	public const int AND=4;
	public const int ARGS=5;
	public const int ASSIGN=6;
	public const int BLOCK=7;
	public const int BOOL=8;
	public const int COMMA=9;
	public const int COMMENT=10;
	public const int DECL=11;
	public const int DECLLIST=12;
	public const int DECLS=13;
	public const int DELETE=14;
	public const int DIVIDE=15;
	public const int DOT=16;
	public const int ELSE=17;
	public const int ENDL=18;
	public const int EQ=19;
	public const int FALSE=20;
	public const int FUN=21;
	public const int FUNCS=22;
	public const int GE=23;
	public const int GT=24;
	public const int ID=25;
	public const int IF=26;
	public const int INT=27;
	public const int INTEGER=28;
	public const int INVOKE=29;
	public const int LBRACE=30;
	public const int LE=31;
	public const int LPAREN=32;
	public const int LT=33;
	public const int MINUS=34;
	public const int NE=35;
	public const int NEG=36;
	public const int NEW=37;
	public const int NOT=38;
	public const int NULL=39;
	public const int OR=40;
	public const int PARAMS=41;
	public const int PLUS=42;
	public const int PRINT=43;
	public const int PROGRAM=44;
	public const int RBRACE=45;
	public const int READ=46;
	public const int RETTYPE=47;
	public const int RETURN=48;
	public const int RPAREN=49;
	public const int SEMI=50;
	public const int STMTS=51;
	public const int STRUCT=52;
	public const int TIMES=53;
	public const int TRUE=54;
	public const int TYPE=55;
	public const int TYPES=56;
	public const int VOID=57;
	public const int WHILE=58;
	public const int WS=59;

	public TypeCheck(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public TypeCheck(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return TypeCheck.tokenNames; } }
	public override string GrammarFileName { get { return "TypeCheck.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_verify();
	partial void LeaveRule_verify();
	// $ANTLR start "verify"
	// TypeCheck.g:13:1: verify :;
	[GrammarRule("verify")]
	private void verify()
	{
		EnterRule_verify();
		EnterRule("verify", 1);
		TraceIn("verify", 1);
		try { DebugEnterRule(GrammarFileName, "verify");
		DebugLocation(13, 0);
		try
		{
			// TypeCheck.g:13:8: ()
			DebugEnterAlt(1);
			// TypeCheck.g:14:4: 
			{
			DebugLocation(14, 4);
			 System.Console.WriteLine("Entered tree walker"); 

			}

		}
		finally
		{
			TraceOut("verify", 1);
			LeaveRule("verify", 1);
			LeaveRule_verify();
		}
		DebugLocation(15, 0);
		} finally { DebugExitRule(GrammarFileName, "verify"); }
		return;

	}
	// $ANTLR end "verify"
	#endregion Rules


}
